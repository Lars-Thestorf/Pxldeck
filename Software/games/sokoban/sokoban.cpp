
#include "sokoban.h"
#include "level.h"
#include <HLM_graphics.h>
#include <HLM_playerInput.h>
#include <HLM_storage.h>
#include <cstdlib>
#include <cstdio>

#include "levels.c"

#include <defaultInputEvents.h>

typedef struct sokobanmem_t {
	bool ingame;
	uint8_t levelnum;
	uint8_t worldnum;
	uint8_t levelprogress;
	class sokoban_level level;
} sokobanmem_t;

#define SOKOMEM ((sokobanmem_t*)gamemem)

#define PLAYERHEIGHT 500
#define GAMEHEIGHT 3200
#define GAMEWIDTH 6400

static const char *SOKOBAN_STORAGE_KEYS[WORLDCOUNT] = {"SokobanProgress","SokobanW1","SokobanW2","SokobanW3","SokobanW4","SokobanW5","SokobanW6"};

const uint8_t icon[] = {0x00, 0x01, 0x20, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC9, 0x86, 0xEE, 0x68, 0xEE, 0x68, 0x00, 0x00, 0xEE, 0x68, 0x49, 0xB8, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x86, 0x00, 0x00, 0xC9, 0x86, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const HLM_game sokoban_game = {
	"Sokoban",
	icon,
	*sokoban_setup,
	*sokoban_loop,
	*sokoban_free
};

void get_level_progress(void* gamemem){
	SOKOMEM->levelprogress = 0;
	if (HLM_storage_exists32(SOKOBAN_STORAGE_KEYS[SOKOMEM->worldnum])) {
		SOKOMEM->levelprogress = HLM_storage_read32(SOKOBAN_STORAGE_KEYS[SOKOMEM->worldnum]);
		printf("read ret: %d\n", SOKOMEM->levelprogress);
	}
	SOKOMEM->levelnum = SOKOMEM->levelprogress;
	if(SOKOMEM->levelprogress == worlds[SOKOMEM->worldnum].levelnum){
		SOKOMEM->levelnum = SOKOMEM->levelprogress - 1;
	}	
}

void* sokoban_setup() {
	void* gamemem = malloc(sizeof(sokobanmem_t));
	SOKOMEM->ingame = false;
	SOKOMEM->worldnum = 0;
	get_level_progress(gamemem);	
	printf("init\n");
	return gamemem;
}
void sokoban_loop(void* gamemem) {

	if(SOKOMEM->ingame){
		if(gotLeftButtonPressed(1, true))
			SOKOMEM->level.go_left();
		if(gotRightButtonPressed(1, true))
			SOKOMEM->level.go_right();
		if(gotUpButtonPressed(1, true))
			SOKOMEM->level.go_up();
		if(gotDownButtonPressed(1, true))
			SOKOMEM->level.go_down();
	}else{
		if(gotLeftButtonPressed(1, true))
			if (SOKOMEM->levelnum > 0)
				SOKOMEM->levelnum--;
		if(gotRightButtonPressed(1, true))
			if (SOKOMEM->levelnum < SOKOMEM->levelprogress && SOKOMEM->levelnum < worlds[SOKOMEM->worldnum].levelnum - 1)
				SOKOMEM->levelnum++;
		if(gotUpButtonPressed(1, true))
			if (SOKOMEM->worldnum < WORLDCOUNT - 1){
				SOKOMEM->worldnum++;
				get_level_progress(gamemem);
			}
		if(gotDownButtonPressed(1, true))
			if (SOKOMEM->worldnum > 0){
				SOKOMEM->worldnum--;
				get_level_progress(gamemem);
			}
	}
	

	if (gotPrimaryButtonPressed(1, false) || gotSecondaryButtonPressed(1, false)) {
		if (!SOKOMEM->ingame) {
			SOKOMEM->level.init(worlds[SOKOMEM->worldnum].levels[SOKOMEM->levelnum]);
			SOKOMEM->ingame = true;
		}
	}
	if (gotCoPrimaryButtonPressed(1, true) || gotCoSecondaryButtonPressed(1, true)) {
		if (SOKOMEM->ingame) {
			SOKOMEM->level.undo();
		}
	}
	if (gotMenuButtonPressed(1, false)) {
		if (SOKOMEM->ingame) {
			SOKOMEM->ingame = false;
		}
	}
	if (SOKOMEM->ingame) {
		SOKOMEM->level.draw();
		if (SOKOMEM->level.isWon()) {
			if (SOKOMEM->levelnum == SOKOMEM->levelprogress) {
				SOKOMEM->levelprogress++;
				bool ret = HLM_storage_write32(SOKOBAN_STORAGE_KEYS[SOKOMEM->worldnum], (uint32_t)SOKOMEM->levelprogress);
				printf("write ret: %d\n", ret);
			}
			if (SOKOMEM->levelprogress < worlds[SOKOMEM->worldnum].levelnum - 1) {
				SOKOMEM->levelnum++;
			}
			SOKOMEM->ingame = false;
		}
	}
	else
	{
		char leveltext[12];
		uint8_t pixels = snprintf(leveltext, 11, "%s", worlds[SOKOMEM->worldnum].name) * 6;
		get_graphics()->drawText((64 - pixels) / 2, 8, leveltext, 0xFFFF);
		pixels = snprintf(leveltext, 13, "%d/%d", SOKOMEM->levelnum + 1, worlds[SOKOMEM->worldnum].levelnum) * 6;
		get_graphics()->drawText((64 - pixels) / 2, 17, leveltext, 0xFFFF);
		if(SOKOMEM->levelprogress == worlds[SOKOMEM->worldnum].levelnum){
			get_graphics()->drawRect(0,0,64,32,0x07E0);
		}
	}
}
void sokoban_free(void* gamemem) {
	SOKOMEM->level.free();
	free(gamemem);
}
